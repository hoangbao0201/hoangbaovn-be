// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["selectRelationCount"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  roleId   Int    @id @default(autoincrement())
  roleName String @unique
  users    User[]
}

model User {
  userId      Int      @id @default(autoincrement())
  name        String
  username    String   @unique
  email       String   @unique
  password    String?
  description String?
  rank        Int      @default(0)
  candy       Int?     @default(100)
  roleId      Int?
  avatarUrl   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  role      Role?      @relation(fields: [roleId], references: [roleId])
  blogs     Blog[]
  userLikes UserLike[]
  userSaves UserSave[]
  userViews UserView[]

  commentsSent     Comment[] @relation(name: "Sender")
  commentsReceived Comment[] @relation(name: "Receiver")
}

model Blog {
  blogId       Int      @id @default(autoincrement())
  authorId     Int
  title        String   @db.VarChar(100)
  slug         String   @db.VarChar(100)
  summary      String   @db.Text
  published    Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  content      String   @db.Text
  thumbnailUrl String?
  views        Int      @default(0)
  likes        Int      @default(0)
  saves        Int      @default(0)

  author     User        @relation(fields: [authorId], references: [userId], onDelete: Cascade)
  blogTags   BlogTag[]
  userLikes  UserLike[]
  userSaves  UserSave[]
  userViews  UserView[]
  blogImages BlogImage[]
  Comment    Comment[]

  @@index([blogId])
}

model BlogImage {
  blogImageId Int    @id @default(autoincrement())
  blogId      Int
  urlImage    String @db.VarChar(200)
  blog        Blog   @relation(fields: [blogId], references: [blogId], onDelete: Cascade)
}

model BlogTag {
  blogTagId Int @id @default(autoincrement())
  blogId    Int
  tagId     Int

  blog Blog @relation(fields: [blogId], references: [blogId], onDelete: Cascade)
  tags Tag  @relation(fields: [tagId], references: [tagId], onDelete: Cascade)
}

model Tag {
  tagId Int    @id @default(autoincrement())
  name  String @unique @db.VarChar(100)
  slug  String @unique @db.VarChar(100)

  blogTags BlogTag[]
}

model UserView {
  userViewId  Int      @id @default(autoincrement())
  userId      Int?
  blogId      Int
  address     String?
  deviceBrand String?
  createdAt   DateTime @default(now())

  user User? @relation(fields: [userId], references: [userId])
  blog Blog  @relation(fields: [blogId], references: [blogId], onDelete: Cascade)
}

model UserLike {
  userLikeId Int @id @default(autoincrement())
  userId     Int
  blogId     Int

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
  blog Blog @relation(fields: [blogId], references: [blogId], onDelete: Cascade)
}

model UserSave {
  userSaveId Int @id @default(autoincrement())
  userId     Int
  blogId     Int

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
  blog Blog @relation(fields: [blogId], references: [blogId], onDelete: Cascade)
}

model Comment {
  commentId   Int      @id @default(autoincrement())
  commentText String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  senderId    Int
  blogId      Int
  receiverId  Int?
  parentId    Int?

  blog     Blog     @relation(fields: [blogId], references: [blogId])
  sender   User     @relation(name: "Sender", fields: [senderId], references: [userId])
  receiver User?    @relation(name: "Receiver", fields: [receiverId], references: [userId])
  parent   Comment? @relation(name: "ParentComment", fields: [parentId], references: [commentId], onDelete: Cascade)

  replyComments Comment[] @relation(name: "ParentComment")
}
